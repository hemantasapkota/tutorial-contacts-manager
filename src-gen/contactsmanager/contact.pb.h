// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contactsmanager/contact.proto

#ifndef PROTOBUF_contactsmanager_2fcontact_2eproto__INCLUDED
#define PROTOBUF_contactsmanager_2fcontact_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace contactsmanager {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_contactsmanager_2fcontact_2eproto();
void protobuf_AssignDesc_contactsmanager_2fcontact_2eproto();
void protobuf_ShutdownFile_contactsmanager_2fcontact_2eproto();

class PContact;

// ===================================================================

class PContact : public ::google::protobuf::Message {
 public:
  PContact();
  virtual ~PContact();
  
  PContact(const PContact& from);
  
  inline PContact& operator=(const PContact& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PContact& default_instance();
  
  void Swap(PContact* other);
  
  // implements Message ----------------------------------------------
  
  PContact* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PContact& from);
  void MergeFrom(const PContact& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string firstName = 1;
  inline bool has_firstname() const;
  inline void clear_firstname();
  static const int kFirstNameFieldNumber = 1;
  inline const ::std::string& firstname() const;
  inline void set_firstname(const ::std::string& value);
  inline void set_firstname(const char* value);
  inline void set_firstname(const char* value, size_t size);
  inline ::std::string* mutable_firstname();
  inline ::std::string* release_firstname();
  
  // optional string middleName = 2;
  inline bool has_middlename() const;
  inline void clear_middlename();
  static const int kMiddleNameFieldNumber = 2;
  inline const ::std::string& middlename() const;
  inline void set_middlename(const ::std::string& value);
  inline void set_middlename(const char* value);
  inline void set_middlename(const char* value, size_t size);
  inline ::std::string* mutable_middlename();
  inline ::std::string* release_middlename();
  
  // optional string lastName = 3;
  inline bool has_lastname() const;
  inline void clear_lastname();
  static const int kLastNameFieldNumber = 3;
  inline const ::std::string& lastname() const;
  inline void set_lastname(const ::std::string& value);
  inline void set_lastname(const char* value);
  inline void set_lastname(const char* value, size_t size);
  inline ::std::string* mutable_lastname();
  inline ::std::string* release_lastname();
  
  // optional string mobile = 4;
  inline bool has_mobile() const;
  inline void clear_mobile();
  static const int kMobileFieldNumber = 4;
  inline const ::std::string& mobile() const;
  inline void set_mobile(const ::std::string& value);
  inline void set_mobile(const char* value);
  inline void set_mobile(const char* value, size_t size);
  inline ::std::string* mutable_mobile();
  inline ::std::string* release_mobile();
  
  // optional string homepage = 5;
  inline bool has_homepage() const;
  inline void clear_homepage();
  static const int kHomepageFieldNumber = 5;
  inline const ::std::string& homepage() const;
  inline void set_homepage(const ::std::string& value);
  inline void set_homepage(const char* value);
  inline void set_homepage(const char* value, size_t size);
  inline ::std::string* mutable_homepage();
  inline ::std::string* release_homepage();
  
  // @@protoc_insertion_point(class_scope:contactsmanager.proto.PContact)
 private:
  inline void set_has_firstname();
  inline void clear_has_firstname();
  inline void set_has_middlename();
  inline void clear_has_middlename();
  inline void set_has_lastname();
  inline void clear_has_lastname();
  inline void set_has_mobile();
  inline void clear_has_mobile();
  inline void set_has_homepage();
  inline void clear_has_homepage();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* firstname_;
  ::std::string* middlename_;
  ::std::string* lastname_;
  ::std::string* mobile_;
  ::std::string* homepage_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_contactsmanager_2fcontact_2eproto();
  friend void protobuf_AssignDesc_contactsmanager_2fcontact_2eproto();
  friend void protobuf_ShutdownFile_contactsmanager_2fcontact_2eproto();
  
  void InitAsDefaultInstance();
  static PContact* default_instance_;
};
// ===================================================================


// ===================================================================

// PContact

// optional string firstName = 1;
inline bool PContact::has_firstname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PContact::set_has_firstname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PContact::clear_has_firstname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PContact::clear_firstname() {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    firstname_->clear();
  }
  clear_has_firstname();
}
inline const ::std::string& PContact::firstname() const {
  return *firstname_;
}
inline void PContact::set_firstname(const ::std::string& value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
}
inline void PContact::set_firstname(const char* value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
}
inline void PContact::set_firstname(const char* value, size_t size) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PContact::mutable_firstname() {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  return firstname_;
}
inline ::std::string* PContact::release_firstname() {
  clear_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = firstname_;
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string middleName = 2;
inline bool PContact::has_middlename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PContact::set_has_middlename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PContact::clear_has_middlename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PContact::clear_middlename() {
  if (middlename_ != &::google::protobuf::internal::kEmptyString) {
    middlename_->clear();
  }
  clear_has_middlename();
}
inline const ::std::string& PContact::middlename() const {
  return *middlename_;
}
inline void PContact::set_middlename(const ::std::string& value) {
  set_has_middlename();
  if (middlename_ == &::google::protobuf::internal::kEmptyString) {
    middlename_ = new ::std::string;
  }
  middlename_->assign(value);
}
inline void PContact::set_middlename(const char* value) {
  set_has_middlename();
  if (middlename_ == &::google::protobuf::internal::kEmptyString) {
    middlename_ = new ::std::string;
  }
  middlename_->assign(value);
}
inline void PContact::set_middlename(const char* value, size_t size) {
  set_has_middlename();
  if (middlename_ == &::google::protobuf::internal::kEmptyString) {
    middlename_ = new ::std::string;
  }
  middlename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PContact::mutable_middlename() {
  set_has_middlename();
  if (middlename_ == &::google::protobuf::internal::kEmptyString) {
    middlename_ = new ::std::string;
  }
  return middlename_;
}
inline ::std::string* PContact::release_middlename() {
  clear_has_middlename();
  if (middlename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = middlename_;
    middlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string lastName = 3;
inline bool PContact::has_lastname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PContact::set_has_lastname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PContact::clear_has_lastname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PContact::clear_lastname() {
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    lastname_->clear();
  }
  clear_has_lastname();
}
inline const ::std::string& PContact::lastname() const {
  return *lastname_;
}
inline void PContact::set_lastname(const ::std::string& value) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
}
inline void PContact::set_lastname(const char* value) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
}
inline void PContact::set_lastname(const char* value, size_t size) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PContact::mutable_lastname() {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  return lastname_;
}
inline ::std::string* PContact::release_lastname() {
  clear_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastname_;
    lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string mobile = 4;
inline bool PContact::has_mobile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PContact::set_has_mobile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PContact::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PContact::clear_mobile() {
  if (mobile_ != &::google::protobuf::internal::kEmptyString) {
    mobile_->clear();
  }
  clear_has_mobile();
}
inline const ::std::string& PContact::mobile() const {
  return *mobile_;
}
inline void PContact::set_mobile(const ::std::string& value) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
}
inline void PContact::set_mobile(const char* value) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
}
inline void PContact::set_mobile(const char* value, size_t size) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PContact::mutable_mobile() {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  return mobile_;
}
inline ::std::string* PContact::release_mobile() {
  clear_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mobile_;
    mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string homepage = 5;
inline bool PContact::has_homepage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PContact::set_has_homepage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PContact::clear_has_homepage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PContact::clear_homepage() {
  if (homepage_ != &::google::protobuf::internal::kEmptyString) {
    homepage_->clear();
  }
  clear_has_homepage();
}
inline const ::std::string& PContact::homepage() const {
  return *homepage_;
}
inline void PContact::set_homepage(const ::std::string& value) {
  set_has_homepage();
  if (homepage_ == &::google::protobuf::internal::kEmptyString) {
    homepage_ = new ::std::string;
  }
  homepage_->assign(value);
}
inline void PContact::set_homepage(const char* value) {
  set_has_homepage();
  if (homepage_ == &::google::protobuf::internal::kEmptyString) {
    homepage_ = new ::std::string;
  }
  homepage_->assign(value);
}
inline void PContact::set_homepage(const char* value, size_t size) {
  set_has_homepage();
  if (homepage_ == &::google::protobuf::internal::kEmptyString) {
    homepage_ = new ::std::string;
  }
  homepage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PContact::mutable_homepage() {
  set_has_homepage();
  if (homepage_ == &::google::protobuf::internal::kEmptyString) {
    homepage_ = new ::std::string;
  }
  return homepage_;
}
inline ::std::string* PContact::release_homepage() {
  clear_has_homepage();
  if (homepage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = homepage_;
    homepage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace contactsmanager

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_contactsmanager_2fcontact_2eproto__INCLUDED
